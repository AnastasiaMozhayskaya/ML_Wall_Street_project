import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import date
from sklearn.model_selection import train_test_split
from prophet import Prophet
from prophet.plot import plot_plotly
from plotly import graph_objs as go
from prophet.make_holidays import make_holidays_df
from sklearn.metrics import mean_absolute_error, mean_squared_error

st.set_page_config(layout='wide', initial_sidebar_state='expanded')
st.set_option('deprecation.showPyplotGlobalUse', False)
st.title('ML Wall Street')
st.image('images/img.png')

START = "2020-01-01"
TODAY = date.today().strftime("%Y-%m-%d")

stocks = ('AAPL', 'UNH', 'MSFT', 'GS', 'HD', 'AMGN', 'MCD', 'CAT', 'CRM', 'V', 'BA', 'HON', 'TRV', 'AXP', 'JPM', 'IBM', 'JNJ', 'WMT', 'PG', 'CVX', 'MRK', 'MMM', 'NKE', 'DIS', 'KO', 'DOW', 'CSCO', 'INTC', 'VZ', 'WBA')
selected_stock = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ Dow Jones', stocks)

period = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞:', 7, 14, 14)

# @st.cache_data
def load_data(ticker):
    data = yf.download(ticker, START, TODAY)
    data.reset_index(inplace=True)
    return data

data = load_data(selected_stock)
latest_date = data['Date'].iloc[-1].strftime('%Y-%m-%d')
st.markdown(f"<h3 style='text-align: center;'>–¶–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤ {latest_date}</h3>", unsafe_allow_html=True)

def evaluate_trend_first_day(predicted_value, actual_value):
    # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    forecast_diff_first_last = predicted_value - actual_value

    # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å: —Ä–æ—Å—Ç, –ø–∞–¥–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    if forecast_diff_first_last > 0:
        return "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å: –†–æ—Å—Ç"
    elif forecast_diff_first_last < 0:
        return "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å: –ü–∞–¥–µ–Ω–∏–µ"
    else:
        return "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"

def evaluate_trend_period(forecast_14_days):
    # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞
    forecast_diff = forecast_14_days['yhat'].iloc[-1] - forecast_14_days['yhat'].iloc[0]

    # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: —Ä–æ—Å—Ç, –ø–∞–¥–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    print("–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞:", forecast_diff)
    
    if forecast_diff > 0:
        return "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: –†–æ—Å—Ç"
    elif forecast_diff < 0:
        return "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: –ü–∞–¥–µ–Ω–∏–µ"
    else:
        return "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –°–®–ê
year_2023 = 2023
# –°–æ–∑–¥–∞–µ–º DataFrame —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ –¥–ª—è 2023
holidays_df_2023 = make_holidays_df(year_list=[year_2023], country='US')
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ datetime
holidays_df_2023['ds'] = pd.to_datetime(holidays_df_2023['ds'])
# –°–æ–∑–¥–∞–µ–º DataFrame —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ –¥–ª—è 2024 –≥–æ–¥–∞
custom_holidays_2024 = pd.DataFrame({
    'holiday': 'custom',
    'ds': pd.to_datetime([
        '2024-01-01',  # –ù–æ–≤—ã–π –≥–æ–¥   
        '2024-01-15',  # –î–µ–Ω—å –ú–∞—Ä—Ç–∏–Ω–∞ –õ—é—Ç–µ—Ä–∞ –ö–∏–Ω–≥–∞ –º–ª–∞–¥—à–µ–≥–æ
        '2024-02-19',  # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –î–∂. –í–∞—à–∏–Ω–≥—Ç–æ–Ω–∞ (Washington‚Äôs Birthday)
        '2024-03-29',  # –°—Ç—Ä–∞—Å—Ç–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞ (Good Friday)
        '2024-05-27',  # –î–µ–Ω—å –ü–∞–º—è—Ç–∏ (Memorial Day)
        '2024-06-19',  # –î–µ–Ω—å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ | Juneteenth
        '2024-07-04',  # –î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        '2024-09-02',  # –î–µ–Ω—å —Ç—Ä—É–¥–∞
        '2024-11-28',  # –î–µ–Ω—å –ë–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏—è
        '2024-12-24',  # –†–æ–∂–¥–µ—Å—Ç–≤–æ
    ]),
    'lower_window': 0,
    'upper_window': 1,
})
# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ DataFrame —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏
all_holidays_US = pd.concat([holidays_df_2023, custom_holidays_2024]).drop_duplicates(subset=['ds']).sort_values(by=['ds'])
# –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–∞—Ç–∞–º–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
holidays_df_US = pd.DataFrame({
    'ds': all_holidays_US['ds'],
    'holiday': 'holiday',
})

def ticker(data, holidays_df, text1, text2, k):
    data = data
    data = data.rename(columns={'Date': 'ds', 'Adj Close': 'y'})
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
    data = data.sort_values(by='ds')
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    split_index = len(data) - period

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    full_train_data3 = data.iloc[:split_index].copy()
    full_test_data3 = data.iloc[split_index:].copy()

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ ds
    full_train_data3['ds'] = full_train_data3['ds'].dt.tz_localize(None)
    full_test_data3['ds'] = full_test_data3['ds'].dt.tz_localize(None)
    # st.write(full_test_data3)

    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Prophet
    model = Prophet(interval_width=0.95)
    model.fit(full_train_data3)
    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è –¥–∞—Ç—ã –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    last_date = full_test_data3['ds'].max()
    future = model.make_future_dataframe(periods=full_test_data3.shape[0]+k, freq='B')
    future = future[~future['ds'].isin(holidays_df['ds'])]
    forecast_test = model.predict(future)
    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ +14 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã
    future_14_days = model.make_future_dataframe(periods=period, freq='B', include_history=False)
    future_14_days['ds'] = pd.date_range(start=last_date + pd.DateOffset(1), periods=period, freq='B')
    forecast_14_days = model.predict(future_14_days)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ 
    fig = go.Figure()
    fig = plot_plotly(model, forecast_test)
    fig.add_trace(go.Scatter(x=full_test_data3['ds'], 
                            y=full_test_data3['y'], 
                            mode='markers',
                            marker=dict(color='orchid'),
                            name='–§–∞–∫—Ç —Ç–µ—Å—Ç'))
    fig.add_trace(go.Scatter(x=forecast_test['ds'].iloc[-period:], 
                             y=forecast_test['yhat'].iloc[-period:], 
                             mode='lines+markers', 
                             marker=dict(color='blue'),
                             name='–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ—Å—Ç'))
    fig.add_trace(go.Scatter(x=forecast_14_days['ds'], y=forecast_14_days['yhat'], mode='lines+markers', name='–ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥—É—â–µ–µ'))
    fig.update_layout(title_text=text1, xaxis_rangeslider_visible=True, xaxis_title='', yaxis_title='')
    fig.update_traces(showlegend=True)
    st.plotly_chart(fig, use_container_width=True, range_slider_visible=True)  
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
    actual_values_test = full_test_data3['y'].values
    predicted_values_test = forecast_test['yhat'].iloc[-period:].values
    mape_test = np.mean(np.abs((actual_values_test - predicted_values_test) / actual_values_test)) * 100
    rmse_test = np.sqrt(mean_squared_error(actual_values_test, predicted_values_test))
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–µ—Ç—Ä–∏–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è 1 –¥–Ω—è —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 7 –¥–Ω–µ–π
    forecast_values = forecast_test['yhat'].tail(period).values
    predicted_value = forecast_values[0]  # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 14
    actual_values = full_test_data3['y'].tail(7).values
    weights = np.array([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4])
    custom_mape = np.dot(weights, np.abs((actual_values - predicted_value) / actual_values)) / np.sum(weights) * 100
    check = st.checkbox(text2)
    if check:
        col1, col2 = st.columns([1, 1])
        with col1:
            st.write(f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.** \
                    –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {period} –¥–Ω–µ–π. –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ ({period} –¥–Ω–µ–π).")
            st.markdown("**–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏:**")
            st.write(f"RMSE: {rmse_test:.2f}")
            st.write(f"MAPE: {mape_test:.2f}%")
            st.write(f"Weighted MAPE: {custom_mape:.2f}%")
            # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
            trend_evaluation_first_day = evaluate_trend_first_day(forecast_14_days['yhat'].iloc[0], full_test_data3['y'].iloc[-1])
            st.write(trend_evaluation_first_day)
            # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞
            trend_evaluation_period = evaluate_trend_period(forecast_14_days[['ds', 'yhat']])
            st.write(trend_evaluation_period)
            st.info("üìå –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ ‚Äúweighted MAPE‚Äô‚Äô  - \
                    –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ 1 –¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –∫—Ä–∞–π–Ω–∏—Ö 7 –¥–Ω–µ–π.")
        with col2:
            forecast_results = pd.DataFrame({
                '–î–∞—Ç–∞': forecast_14_days['ds'].iloc[-period:].values,
                '–ü—Ä–æ–≥–Ω–æ–∑': forecast_14_days['yhat'].iloc[-period:].values.round(2)
            })
            st.dataframe(forecast_results.set_index('–î–∞—Ç–∞'))
        # fig2 = data.plot_components(future_14_days)
        # st.write(fig2)

text1 = f'–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {period} –¥–Ω–µ–π –ø–æ –∞–∫—Ü–∏–∏ {selected_stock}, USD üá∫üá∏'
text2 = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ {selected_stock}"
ticker(data, holidays_df_US, text1, text2, 1)
