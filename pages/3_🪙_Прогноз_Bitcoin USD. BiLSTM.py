import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
from datetime import date, datetime, timedelta
from model.BiLSTM_model import BiLSTM
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from datetime import timedelta
import plotly.graph_objects as go

st.set_page_config(layout='wide', initial_sidebar_state='expanded')
st.set_option('deprecation.showPyplotGlobalUse', False)
st.title('ML Wall Street')
st.image('images/img.png')

START = "2021-01-01"
TODAY = date.today().strftime("%Y-%m-%d")
period = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞:', 7, 14, 14)

df = yf.download('BTC-USD', START, TODAY)
df.reset_index(inplace=True)

latest_date = df['Date'].iloc[-1].strftime('%Y-%m-%d')
st.markdown(f"<h3 style='text-align: center;'>–¶–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤ {latest_date}</h3>", unsafe_allow_html=True)

def rmse(predictions, targets):
    return np.sqrt(((predictions - targets) ** 2).mean())

def mape(predictions, targets):
    return np.mean(np.abs((targets - predictions) / targets)) * 100

def weighted_mape(predictions, targets, weights):
    errors = np.abs(targets - predictions)
    weighted_errors = errors * weights
    weighted_mape = np.sum(weighted_errors) / np.sum(np.abs(targets) * weights) * 100
    return weighted_mape

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df['Adj Close'].values.reshape(-1,1))

def create_dataset(data, time_step=1):
    X, Y = [], []
    for i in range(len(data)-time_step-1):
        a = data[i:(i+time_step), 0]
        X.append(a)
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

X, y = create_dataset(scaled_data, time_step=period)

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
test_size = period  # 14 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
train_size = len(X) - test_size
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

X_train = torch.Tensor(X_train).unsqueeze(-1)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
X_test = torch.Tensor(X_test).unsqueeze(-1)    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LSTM
y_train = torch.Tensor(y_train)
y_test = torch.Tensor(y_test)

input_size = 1  # –í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä —Ä–∞–≤–µ–Ω 1, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ–¥–Ω—É —Ñ–∏—á—É - —Ü–µ–Ω—É
hidden_size = 128
num_layers = 3
output_size = 1
model = BiLSTM(input_size, hidden_size, num_layers, output_size)
criterion = nn.MSELoss()

model = BiLSTM(1, 128, 3, 1)
model.load_state_dict(torch.load('model/model_weights.pth'))
model.eval()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
model_weights = st.session_state.model_weights

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –≤ –º–æ–¥–µ–ª—å
model.load_state_dict(model_weights)
with torch.no_grad():
    test_predictions = model(X_test)
    test_loss = criterion(test_predictions, y_test.view(-1, 1))

    test_predictions = scaler.inverse_transform(test_predictions.cpu().numpy())
    y_test = scaler.inverse_transform(y_test.view(-1, 1).cpu().numpy())
    
    test_rmse = rmse(test_predictions, y_test)
    test_mape = mape(test_predictions, y_test)
    weights = np.array([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4])
    test_weighted_mape = weighted_mape(test_predictions, y_test, weights)

    # st.write(f'Test Loss: {test_loss.item():.4f}')
    # st.write(f'Test RMSE: {test_rmse:.4f}')
    # st.write(f'Test MAPE: {test_mape:.4f}%')
    # st.write(f'Test Weighted MAPE: {test_weighted_mape:.4f}%')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
future_dates = [df['Date'].values[-1] + np.timedelta64(i+1, 'D') for i in range(period)]
# –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
trend_first_day = test_predictions[0] - df['Adj Close'].iloc[-1]
# –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
trend_last_day = test_predictions[-1] - test_predictions[0]
# –ü—Ä–æ–≥–Ω–æ–∑—ã —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–æ–≤
adjusted_future_predictions = [df['Adj Close'].iloc[-1] + trend_first_day + (trend_last_day / period) * i for i in range(period)]

adjusted_future_pred = pd.Series([x.item() for x in adjusted_future_predictions])

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
formatted_dates = np.datetime_as_string(future_dates)

# fig = go.Figure()
# fig.add_trace(go.Scatter(x=df['Date'], 
#                          y=df['Adj Close'], 
#                          mode='lines',
#                          name='–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
#                          line=dict(width=2)))

# fig.add_trace(go.Scatter(x=formatted_dates, 
#                          y=adjusted_future_pred, 
#                          mode='lines+markers',
#                          name='–ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥—É—â–µ–µ',
#                          line=dict(color='red', width=2, dash='dash')))

# fig.update_layout(title=f'–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {period} –¥–Ω–µ–π –ø–æ Bitcoin, USD üá∫üá∏',
#                   xaxis=dict(tickangle=45), xaxis_rangeslider_visible=True, showlegend=True)
# st.plotly_chart(fig, use_container_width=True)

fig = go.Figure()
fig.add_trace(go.Scatter(x=df['Date'], 
                         y=df['Adj Close'], 
                         mode='lines',
                         name='–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                         line=dict(width=2)))

fig.add_trace(go.Scatter(x=formatted_dates, 
                         y=adjusted_future_pred, 
                         mode='lines+markers',
                         name='–ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥—É—â–µ–µ',
                         line=dict(color='red', width=2, dash='dash')))

fig.update_layout(title=f'–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {period} –¥–Ω–µ–π –ø–æ Bitcoin, USD üá∫üá∏',
                  xaxis=dict(tickangle=45),
                  xaxis_range=[datetime.strptime(latest_date, '%Y-%m-%d') - timedelta(days=12), \
                               datetime.strptime(latest_date, '%Y-%m-%d') +  timedelta(days=18)], 
                               xaxis_rangeslider_visible=True, showlegend=True)

st.plotly_chart(fig, use_container_width=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
future_dates = [df['Date'].values[-1] + np.timedelta64(i+1, 'D') for i in range(period)]

# –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
trend_first_day = adjusted_future_predictions[0] - df['Adj Close'].iloc[-1]

# –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
trend_last_day = adjusted_future_predictions[-1] - adjusted_future_predictions[0]

# –í—ã–≤–æ–¥ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
trend_first_day_text = "–†–æ—Å—Ç" if trend_first_day > 0 else "–ü–∞–¥–µ–Ω–∏–µ" if trend_first_day < 0 else "–ù–µ—Ç —Ç—Ä–µ–Ω–¥–∞"
trend_last_day_text = "–†–æ—Å—Ç" if trend_last_day > 0 else "–ü–∞–¥–µ–Ω–∏–µ" if trend_last_day < 0 else "–ù–µ—Ç —Ç—Ä–µ–Ω–¥–∞"

check = st.checkbox('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ Bitcoin')
if check:
    col1, col2 = st.columns([1, 1])
    with col1:
        st.write(f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.** \
                 –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {period} –¥–Ω–µ–π. –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ ({period} –¥–Ω–µ–π).")
        st.markdown("**–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏:**")
        st.write(f"RMSE: {test_rmse:.2f}")
        st.write(f"MAPE: {test_mape:.2f}%")
        st.write(f"Weighted MAPE: {test_weighted_mape:.2f}%")
        # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        st.write(f'–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å: {trend_first_day_text}')
        # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞
        st.write(f'–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: {trend_last_day_text}')
        st.info("üìå –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ ‚Äúweighted MAPE‚Äô‚Äô  - \
                 –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ 1 –¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –∫—Ä–∞–π–Ω–∏—Ö 7 –¥–Ω–µ–π.")
    with col2:
        results = pd.DataFrame({
            '–î–∞—Ç–∞': future_dates,
            '–ü—Ä–æ–≥–Ω–æ–∑': adjusted_future_pred.values.round(2)
        })
        st.dataframe(results.set_index('–î–∞—Ç–∞'))
